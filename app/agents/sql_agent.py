import openai
from typing import Dict, Any, Optional, Tuple
from ..models.message import Message, ConversationHistory
from ..utils.logging import AgentLogger
from ..grist.schema_fetcher import GristSchemaFetcher
from ..grist.sql_runner import GristSQLRunner
import time
import re


class SQLAgent:
    """Agent SQL qui g√©n√®re des requ√™tes SQL √† partir de langage naturel"""
    
    def __init__(self, openai_client: openai.AsyncOpenAI, schema_fetcher: GristSchemaFetcher, 
                 sql_runner: GristSQLRunner, model: str = "gpt-4"):
        self.client = openai_client
        self.schema_fetcher = schema_fetcher
        self.sql_runner = sql_runner
        self.model = model
        self.logger = AgentLogger("sql_agent")
        
        self.sql_prompt_template = """Tu es un expert SQL sp√©cialis√© dans la g√©n√©ration de requ√™tes pour Grist.

        SCH√âMAS DISPONIBLES:
        {schemas}

        INSTRUCTIONS IMPORTANTES:
        1. G√©n√®re UNIQUEMENT des requ√™tes SELECT (pas de INSERT, UPDATE, DELETE, DROP)
        2. Utilise exactement les noms de tables et colonnes fournis dans les sch√©mas
        3. Si plusieurs tables sont disponibles, utilise les JOINtures appropri√©es
        4. Optimise pour la performance (LIMIT quand appropri√©)
        5. G√®re les types de donn√©es correctement (Text, Numeric, Date, etc.)
        6. Si la question est ambigu√´, propose la requ√™te la plus probable

        QUESTION UTILISATEUR: {user_question}

        CONTEXTE CONVERSATIONNEL:
        {conversation_context}

        R√©ponds avec :
        1. La requ√™te SQL (entre ```sql et ```)
        2. Une explication br√®ve de ce que fait la requ√™te
        3. Les limitations ou hypoth√®ses √©ventuelles

        Format de r√©ponse attendu :
        ```sql
        SELECT ...
        ```

        Explication : Cette requ√™te r√©cup√®re..."""
    
    async def process_message(self, user_message: str, conversation_history: ConversationHistory, 
                            document_id: str, request_id: str) -> Tuple[str, Optional[str], Optional[Dict[str, Any]]]:
        """
        Traite un message n√©cessitant une requ√™te SQL
        
        Returns:
            tuple: (response_text, sql_query, sql_results)
        """
        start_time = time.time()
        
        self.logger.log_agent_start(request_id, user_message)
        
        try:
            # 1. R√©cup√©ration des sch√©mas
            schemas = await self.schema_fetcher.get_all_schemas(document_id, request_id)
            
            if not schemas:
                return ("D√©sol√©, je ne peux pas acc√©der aux sch√©mas de donn√©es de ce document. "
                       "V√©rifiez que le document existe et que vous avez les permissions appropri√©es."), None, None
            
            # 2. G√©n√©ration de la requ√™te SQL
            sql_query = await self._generate_sql_query(user_message, conversation_history, schemas, request_id)
            
            if not sql_query:
                return ("Je n'ai pas pu g√©n√©rer une requ√™te SQL appropri√©e pour votre question. "
                       "Pouvez-vous la reformuler ou √™tre plus sp√©cifique ?"), None, None
            
            # 3. Ex√©cution de la requ√™te
            sql_results = await self.sql_runner.execute_sql(document_id, sql_query, request_id)
            
            # 4. Formatage de la r√©ponse
            response_text = self._format_sql_response(sql_query, sql_results, user_message)
            
            execution_time = time.time() - start_time
            self.logger.log_agent_response(request_id, response_text, execution_time)
            self.logger.log_sql_generation(sql_query, len(schemas))
            
            return response_text, sql_query, sql_results
            
        except Exception as e:
            execution_time = time.time() - start_time
            self.logger.error(
                f"Erreur lors du traitement SQL: {str(e)}",
                request_id=request_id,
                execution_time=execution_time
            )
            return (f"D√©sol√©, j'ai rencontr√© une erreur lors de l'analyse de vos donn√©es : {str(e)}"), None, None
    
    async def _generate_sql_query(self, user_message: str, conversation_history: ConversationHistory, 
                                 schemas: Dict[str, Dict[str, Any]], request_id: str) -> Optional[str]:
        """G√©n√®re une requ√™te SQL √† partir du langage naturel"""
        
        # Formatage des sch√©mas pour le prompt
        schemas_text = self.schema_fetcher.format_schema_for_prompt(schemas)
        
        # Contexte conversationnel
        recent_messages = conversation_history.get_recent_messages(3)
        context = "\n".join([f"{msg.role}: {msg.content}" for msg in recent_messages[:-1]])
        
        # Construction du prompt
        prompt = self.sql_prompt_template.format(
            schemas=schemas_text,
            user_question=user_message,
            conversation_context=context if context else "Aucun contexte pr√©c√©dent"
        )
        
        try:
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=500,
                temperature=0.1  # Peu de cr√©ativit√© pour la g√©n√©ration SQL
            )
            
            ai_response = response.choices[0].message.content.strip()
            
            # Extraction de la requ√™te SQL
            sql_query = self._extract_sql_from_response(ai_response)
            
            if sql_query:
                self.logger.info(
                    "Requ√™te SQL g√©n√©r√©e avec succ√®s",
                    request_id=request_id,
                    sql_length=len(sql_query)
                )
                return sql_query
            else:
                self.logger.warning(
                    "Aucune requ√™te SQL extraite de la r√©ponse",
                    request_id=request_id,
                    ai_response=ai_response[:200]
                )
                return None
                
        except Exception as e:
            self.logger.error(
                f"Erreur lors de la g√©n√©ration SQL: {str(e)}",
                request_id=request_id
            )
            return None
    
    def _extract_sql_from_response(self, ai_response: str) -> Optional[str]:
        """Extrait la requ√™te SQL de la r√©ponse de l'IA"""
        
        # Recherche de blocs SQL entre ```sql et ```
        sql_pattern = r'```sql\s*(.*?)\s*```'
        matches = re.findall(sql_pattern, ai_response, re.DOTALL | re.IGNORECASE)
        
        if matches:
            return matches[0].strip()
        
        # Fallback : recherche de SELECT...
        select_pattern = r'(SELECT\s+.*?)(?:\n\n|\Z)'
        matches = re.findall(select_pattern, ai_response, re.DOTALL | re.IGNORECASE)
        
        if matches:
            return matches[0].strip()
        
        return None
    
    def _format_sql_response(self, sql_query: str, sql_results: Dict[str, Any], user_question: str) -> str:
        """Formate la r√©ponse finale avec les r√©sultats SQL"""
        
        if not sql_results["success"]:
            return (f"J'ai g√©n√©r√© cette requ√™te SQL :\n\n```sql\n{sql_query}\n```\n\n"
                   f"Mais elle a produit une erreur : {sql_results.get('error', 'Erreur inconnue')}\n\n"
                   f"Pouvez-vous v√©rifier votre question ou les donn√©es disponibles ?")
        
        row_count = sql_results.get("row_count", 0)
        
        if row_count == 0:
            return (f"J'ai ex√©cut√© cette requ√™te :\n\n```sql\n{sql_query}\n```\n\n"
                   f"**R√©sultat :** Aucune donn√©e ne correspond aux crit√®res de votre recherche.\n\n"
                   f"üí° **Suggestions :**\n"
                   f"‚Ä¢ V√©rifiez si les donn√©es existent dans vos tables\n"
                   f"‚Ä¢ Essayez d'√©largir vos crit√®res de recherche\n"
                   f"‚Ä¢ Reformulez votre question avec des termes diff√©rents\n\n"
                   f"*Cette absence de r√©sultats peut √™tre normale selon vos donn√©es.*")
        
        # Formatage des r√©sultats
        formatted_results = self.sql_runner.format_results_for_analysis(sql_results)
        
        response = [
            f"Voici les r√©sultats pour votre question :",
            f"",
            f"**Requ√™te ex√©cut√©e :**",
            f"```sql",
            f"{sql_query}",
            f"```",
            f"",
            f"**R√©sultats ({row_count} ligne{'s' if row_count > 1 else ''}) :**",
            f"",
            formatted_results
        ]
        
        return "\n".join(response)
    
    def _suggest_improvements(self, user_message: str, schemas: Dict[str, Dict[str, Any]]) -> str:
        """Sugg√®re des am√©liorations pour des questions ambigu√´s"""
        
        available_tables = list(schemas.keys())
        
        suggestions = [
            f"Pour vous aider davantage, voici les tables disponibles : {', '.join(available_tables)}",
            "",
            "Vous pouvez √™tre plus sp√©cifique en mentionnant :",
            "‚Ä¢ La p√©riode qui vous int√©resse (mois dernier, cette ann√©e...)",
            "‚Ä¢ Les crit√®res de filtrage souhait√©s",
            "‚Ä¢ Le type d'agr√©gation (somme, moyenne, nombre...)",
            "",
            "Exemple : 'Montre-moi le total des ventes par mois pour cette ann√©e'"
        ]
        
        return "\n".join(suggestions) 