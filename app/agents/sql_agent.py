import openai
from typing import Dict, Any, Optional, Tuple
from ..models.message import Message, ConversationHistory
from ..utils.logging import AgentLogger
from ..utils.conversation_formatter import (
    format_conversation_history,
    should_include_conversation_history,
)
from ..grist.schema_fetcher import GristSchemaFetcher
from ..grist.sql_runner import GristSQLRunner
from ..grist.sample_fetcher import GristSampleFetcher
import time
import re


class SQLAgent:
    """Agent SQL qui gÃ©nÃ¨re des requÃªtes SQL Ã  partir de langage naturel"""

    def __init__(
        self,
        openai_client: openai.AsyncOpenAI,
        schema_fetcher: GristSchemaFetcher,
        sql_runner: GristSQLRunner,
        sample_fetcher: GristSampleFetcher,
        model: str = "gpt-4",
    ):
        self.client = openai_client
        self.schema_fetcher = schema_fetcher
        self.sql_runner = sql_runner
        self.sample_fetcher = sample_fetcher
        self.model = model
        self.logger = AgentLogger("sql_agent")

        self.sql_prompt_template = """Tu es un expert SQL spÃ©cialisÃ© dans la gÃ©nÃ©ration de requÃªtes pour Grist.

SCHÃ‰MAS DISPONIBLES:
{schemas}

{data_samples}

INSTRUCTIONS IMPORTANTES:
1. GÃ©nÃ¨re UNIQUEMENT des requÃªtes SELECT (pas de INSERT, UPDATE, DELETE, DROP)
2. Utilise exactement les noms de tables et colonnes fournis dans les schÃ©mas
3. Si plusieurs tables sont disponibles, utilise les JOINtures appropriÃ©es
4. Optimise pour la performance (LIMIT quand appropriÃ©)
5. **ATTENTION aux types de donnÃ©es** : Certaines colonnes peuvent Ãªtre typÃ©es "Text" mÃªme si elles contiennent des nombres. Regarde les Ã©chantillons pour identifier le contenu rÃ©el. Pour les comparaisons numÃ©riques sur des colonnes "Text" contenant des nombres, utilise CAST(colonne AS REAL) ou CAST(colonne AS INTEGER)
6. Utilise les Ã©chantillons de donnÃ©es pour mieux comprendre le contenu et ajuster ta requÃªte
7. Si la question est ambiguÃ«, propose la requÃªte la plus probable

EXEMPLE de conversion de type :
- Mauvais: `SELECT MAX(age) FROM table` (compare en texte : "9" > "35")  
- Bon: `SELECT MAX(CAST(age AS REAL)) FROM table` (compare en nombre : 35 > 9)

HISTORIQUE DE CONVERSATION:
{conversation_history}

QUESTION UTILISATEUR: {user_question}

RÃ©ponds avec :
1. La requÃªte SQL (entre ```sql et ```)
2. Une explication brÃ¨ve de ce que fait la requÃªte
3. Les limitations ou hypothÃ¨ses Ã©ventuelles

Format de rÃ©ponse attendu :
```sql
SELECT ...
```

Explication : Cette requÃªte rÃ©cupÃ¨re..."""

    async def process_message(
        self,
        user_message: str,
        conversation_history: ConversationHistory,
        document_id: str,
        grist_api_key: str,
        request_id: str,
    ) -> Tuple[str, Optional[str], Optional[Dict[str, Any]]]:
        """
        Traite un message nÃ©cessitant une requÃªte SQL

        Returns:
            tuple: (response_text, sql_query, sql_results)
        """
        start_time = time.time()

        self.logger.log_agent_start("sql", user_message[:80])

        try:
            # 1. RÃ©cupÃ©ration des schÃ©mas
            schemas = await self.schema_fetcher.get_all_schemas(document_id, request_id)

            if not schemas:
                return (
                    (
                        "DÃ©solÃ©, je ne peux pas accÃ©der aux schÃ©mas de donnÃ©es de ce document. "
                        "VÃ©rifiez que le document existe et que vous avez les permissions appropriÃ©es."
                    ),
                    None,
                    None,
                )

            # 2. RÃ©cupÃ©ration des Ã©chantillons de donnÃ©es
            data_samples = await self.sample_fetcher.fetch_all_samples(
                document_id, schemas, grist_api_key, limit=5, request_id=request_id
            )

            # 3. GÃ©nÃ©ration de la requÃªte SQL
            sql_query = await self._generate_sql_query(
                user_message, conversation_history, schemas, data_samples, request_id
            )

            if not sql_query:
                return (
                    (
                        "Je n'ai pas pu gÃ©nÃ©rer une requÃªte SQL appropriÃ©e pour votre question. "
                        "Pouvez-vous la reformuler ou Ãªtre plus spÃ©cifique ?"
                    ),
                    None,
                    None,
                )

            # 4. ExÃ©cution de la requÃªte
            sql_results = await self.sql_runner.execute_sql(context.document_id, sql_query, context.request_id)
            
            # 5. VÃ©rification des rÃ©sultats
            if not sql_results["success"]:
                context.set_error(sql_results.get('error', 'Erreur inconnue lors de l\'exÃ©cution SQL'), "sql")
                context.sql_query = sql_query  # Garder la requÃªte pour debug
                return None  # Fallback vers Generic
            
            # 6. SuccÃ¨s - formatage de la rÃ©ponse
            context.sql_query = sql_query
            context.sql_results = sql_results
            context.data_analyzed = True
            
            response_text = self._format_successful_sql_response(sql_query, sql_results)
            
            execution_time = time.time() - start_time
            self.logger.log_agent_response("sql", True, execution_time)
            self.logger.log_sql_generation(sql_query, len(schemas))
            
            return response_text
            
        except Exception as e:
            execution_time = time.time() - start_time
            self.logger.error(
                f"Erreur lors du traitement SQL: {str(e)}",
                request_id=context.request_id,
                execution_time=execution_time
            )
            context.set_error(f"Erreur technique: {str(e)}", "sql")
            return None  # Fallback vers Generic

    async def _generate_sql_query(
        self,
        user_message: str,
        conversation_history: ConversationHistory,
        schemas: Dict[str, Dict[str, Any]],
        data_samples: Dict[str, Dict[str, Any]],
        request_id: str,
    ) -> Optional[str]:
        """GÃ©nÃ¨re une requÃªte SQL Ã  partir du langage naturel"""

        # Formatage des schÃ©mas pour le prompt
        schemas_text = self.schema_fetcher.format_schema_for_prompt(schemas)

        # Formatage des Ã©chantillons de donnÃ©es
        samples_text = (
            self.sample_fetcher.format_all_samples_for_prompt(
                data_samples, max_rows_per_table=5
            )
            if data_samples
            else "Aucun Ã©chantillon de donnÃ©es disponible"
        )

        # Historique de conversation formatÃ© (paires user/assistant complÃ¨tes)
        conversation_context = (
            format_conversation_history(conversation_history, max_pairs=2)
            if should_include_conversation_history("sql")
            else "Aucun historique de conversation"
        )

        # Construction du prompt
        prompt = self.sql_prompt_template.format(
            schemas=schemas_text,
            data_samples=samples_text,
            user_question=user_message,
            conversation_history=conversation_context,
        )

        try:
            # ðŸ¤– Log lisible de la requÃªte IA
            self.logger.log_ai_request(
                model=self.model,
                messages_count=1,  # Un seul message pour la gÃ©nÃ©ration SQL
                max_tokens=500,
                request_id=request_id,
                prompt_preview=prompt,
            )

            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=500,
                temperature=0.1,  # Peu de crÃ©ativitÃ© pour la gÃ©nÃ©ration SQL
            )

            ai_response = response.choices[0].message.content.strip()

            # ðŸ¤– Log lisible de la rÃ©ponse IA
            tokens_used = (
                getattr(response.usage, "total_tokens", None)
                if hasattr(response, "usage")
                else None
            )
            self.logger.log_ai_response(
                model=self.model,
                tokens_used=tokens_used,
                success=True,
                request_id=request_id,
                response_preview=ai_response,
            )

            # Extraction de la requÃªte SQL
            sql_query = self._extract_sql_from_response(ai_response)

            if sql_query:
                self.logger.info(
                    "RequÃªte SQL gÃ©nÃ©rÃ©e avec succÃ¨s",
                    request_id=request_id,
                    sql_length=len(sql_query),
                )
                return sql_query
            else:
                self.logger.warning(
                    "Aucune requÃªte SQL extraite de la rÃ©ponse",
                    request_id=request_id,
                    ai_response=ai_response[:200],
                )
                return None

        except Exception as e:
            # ðŸ¤– Log lisible d'erreur IA
            self.logger.log_ai_response(
                model=self.model, success=False, request_id=request_id
            )

            self.logger.error(
                f"Erreur lors de la gÃ©nÃ©ration SQL: {str(e)}", request_id=request_id
            )
            return None

    def _extract_sql_from_response(self, ai_response: str) -> Optional[str]:
        """Extrait la requÃªte SQL de la rÃ©ponse de l'IA"""

        # Recherche de blocs SQL entre ```sql et ```
        sql_pattern = r"```sql\s*(.*?)\s*```"
        matches = re.findall(sql_pattern, ai_response, re.DOTALL | re.IGNORECASE)

        if matches:
            return matches[0].strip()

        # Fallback : recherche de SELECT...
        select_pattern = r"(SELECT\s+.*?)(?:\n\n|\Z)"
        matches = re.findall(select_pattern, ai_response, re.DOTALL | re.IGNORECASE)

        if matches:
            return matches[0].strip()

        return None

    def _format_successful_sql_response(self, sql_query: str, sql_results: Dict[str, Any]) -> str:
        """Formate la rÃ©ponse pour une requÃªte SQL rÃ©ussie"""
        
        row_count = sql_results.get("row_count", 0)

        if row_count == 0:
            return (
                f"J'ai exÃ©cutÃ© cette requÃªte :\n\n```sql\n{sql_query}\n```\n\n"
                f"**RÃ©sultat :** Aucune donnÃ©e ne correspond aux critÃ¨res de votre recherche.\n\n"
                f"ðŸ’¡ **Suggestions :**\n"
                f"â€¢ VÃ©rifiez si les donnÃ©es existent dans vos tables\n"
                f"â€¢ Essayez d'Ã©largir vos critÃ¨res de recherche\n"
                f"â€¢ Reformulez votre question avec des termes diffÃ©rents\n\n"
                f"*Cette absence de rÃ©sultats peut Ãªtre normale selon vos donnÃ©es.*"
            )

        # Formatage des rÃ©sultats
        formatted_results = self.sql_runner.format_results_for_analysis(sql_results)

        response = [
            f"Voici les rÃ©sultats pour votre question :",
            f"",
            f"**RequÃªte exÃ©cutÃ©e :**",
            f"```sql",
            f"{sql_query}",
            f"```",
            f"",
            f"**RÃ©sultats ({row_count} ligne{'s' if row_count > 1 else ''}) :**",
            f"",
            formatted_results,
        ]

        return "\n".join(response)

