"""
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
ARCHITECTURE AGENT - Conseiller en structure de donn√©es relationnelles
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

R√îLE:
    Analyse la structure des tables Grist et donne des conseils simples sur
    l'organisation relationnelle des donn√©es.

FONCTIONNEMENT:
    1. R√©cup√®re les sch√©mas des tables (noms, colonnes, types)
    2. D√©tecte les relations Reference entre tables
    3. Calcule quelques m√©triques basiques
    4. Utilise le LLM pour g√©n√©rer 3-5 conseils simples

EXEMPLES:
    - "Ma structure est-elle bien organis√©e?"
    - "Comment am√©liorer mes relations?"
    - "Donne-moi un avis critique sur ma donn√©e"

SORTIES:
    - Nombre de tables/colonnes
    - Relations d√©tect√©es
    - 3-5 recommandations courtes et actionnables

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""

import openai
from typing import Dict, List, Any, Optional
import time

from ..models.architecture import (
    ArchitectureAnalysis,
    ArchitectureMetrics,
    RelationshipAnalysis,
    RelationshipType,
)
from ..grist.schema_fetcher import GristSchemaFetcher
from ..grist.sample_fetcher import GristSampleFetcher
from ..utils.logging import AgentLogger
from ..utils.conversation_formatter import (
    format_conversation_history,
    should_include_conversation_history,
)


class DataArchitectureAgent:
    """Agent de conseil en architecture de donn√©es relationnelles"""

    def __init__(
        self,
        openai_client: openai.AsyncOpenAI,
        schema_fetcher: GristSchemaFetcher,
        sample_fetcher: GristSampleFetcher,
        model: str = "gpt-4",
    ):
        self.client = openai_client
        self.schema_fetcher = schema_fetcher
        self.sample_fetcher = sample_fetcher
        self.model = model
        self.logger = AgentLogger("architecture_agent")

    async def analyze_document_structure(
        self,
        document_id: str,
        user_question: str,
        conversation_history,
        grist_api_key: str,
        request_id: str,
    ) -> ArchitectureAnalysis:
        """
        Analyse la structure du document et retourne des conseils simples
        """
        start_time = time.time()
        self.logger.log_agent_start(request_id, user_question)

        try:
            # 1. R√©cup√©rer les sch√©mas
            schemas = await self.schema_fetcher.get_all_schemas(document_id, request_id)

            if not schemas:
                self.logger.warning("Aucun sch√©ma r√©cup√©r√©", request_id=request_id)
                return self._create_empty_analysis(document_id, user_question)

            # 2. Calculer m√©triques basiques
            metrics = self._calculate_metrics(schemas)

            # 3. R√©cup√©rer √©chantillons de donn√©es
            data_samples = await self.sample_fetcher.fetch_all_samples(
                document_id, schemas, grist_api_key, limit=5, request_id=request_id
            )

            # 4. D√©tecter relations
            relationships = self._find_relationships(schemas)

            # 5. G√©n√©rer recommandations via LLM
            recommendations = await self._generate_recommendations(
                schemas,
                metrics,
                relationships,
                data_samples,
                user_question,
                conversation_history,
                request_id,
            )

            # 6. Construire l'analyse
            analysis = ArchitectureAnalysis(
                document_id=document_id,
                user_question=user_question,
                schemas=schemas,
                metrics=metrics,
                relationships=relationships,
                recommendations=recommendations,
            )

            execution_time = time.time() - start_time
            self.logger.log_agent_response(
                request_id, f"Analyse termin√©e: {len(schemas)} tables", execution_time
            )

            return analysis

        except Exception as e:
            execution_time = time.time() - start_time
            self.logger.error(
                f"Erreur lors de l'analyse: {str(e)}",
                request_id=request_id,
                execution_time=execution_time,
            )
            raise

    def _calculate_metrics(
        self, schemas: Dict[str, Dict[str, Any]]
    ) -> ArchitectureMetrics:
        """Calcule des m√©triques simples"""
        total_tables = len(schemas)
        total_columns = sum(len(s["columns"]) for s in schemas.values())

        # Compter les relations Reference
        total_relationships = sum(
            sum(
                1
                for col in s["columns"]
                if col["type"] in ["Reference", "Reference List"]
            )
            for s in schemas.values()
        )

        return ArchitectureMetrics(
            total_tables=total_tables,
            total_columns=total_columns,
            avg_columns_per_table=total_columns / total_tables
            if total_tables > 0
            else 0,
            total_relationships=total_relationships,
        )

    def _find_relationships(
        self, schemas: Dict[str, Dict[str, Any]]
    ) -> List[RelationshipAnalysis]:
        """Trouve les relations Reference entre tables"""
        relationships = []

        for table_id, schema in schemas.items():
            for col in schema["columns"]:
                if col["type"] == "Reference":
                    relationships.append(
                        RelationshipAnalysis(
                            from_table=table_id,
                            to_table="unknown",  # Grist ne donne pas toujours la cible
                            relationship_type=RelationshipType.ONE_TO_MANY,
                            column_name=col["label"],
                        )
                    )
                elif col["type"] == "Reference List":
                    relationships.append(
                        RelationshipAnalysis(
                            from_table=table_id,
                            to_table="unknown",
                            relationship_type=RelationshipType.MANY_TO_MANY,
                            column_name=col["label"],
                        )
                    )

        return relationships

    async def _generate_recommendations(
        self,
        schemas: Dict[str, Any],
        metrics: ArchitectureMetrics,
        relationships: List[RelationshipAnalysis],
        data_samples: Dict[str, Dict[str, Any]],
        user_question: str,
        conversation_history,
        request_id: str,
    ) -> List[str]:
        """G√©n√®re 3-5 conseils simples via LLM"""

        # Construire r√©sum√© sch√©mas
        schemas_summary = "\n".join(
            [
                f"- **{table_id}**: {len(schema['columns'])} colonnes ({', '.join([col['label'] for col in schema['columns'][:5]])}{'...' if len(schema['columns']) > 5 else ''})"
                for table_id, schema in schemas.items()
            ]
        )

        # R√©sum√© relations
        if relationships:
            relations_summary = f"{len(relationships)} relation(s) d√©tect√©e(s)"
        else:
            relations_summary = "Aucune relation d√©tect√©e"

        # Formatage des √©chantillons de donn√©es
        samples_text = (
            self.sample_fetcher.format_all_samples_for_prompt(
                data_samples, max_rows_per_table=3
            )
            if data_samples
            else "Aucun √©chantillon de donn√©es disponible"
        )

        # Historique de conversation format√© (paires user/assistant compl√®tes)
        conversation_context = (
            format_conversation_history(conversation_history, max_pairs=2)
            if should_include_conversation_history("architecture")
            else "Aucun historique de conversation"
        )

        # Prompt simple
        prompt = f"""Tu es un conseiller en architecture de donn√©es pour Grist.

STRUCTURE ACTUELLE:
{schemas_summary}

{relations_summary}

{samples_text}

INSTRUCTIONS:
1. Analyse la structure relationnelle des donn√©es (tables, colonnes, relations)
2. √âvalue la normalisation (1NF, 2NF, 3NF)
3. D√©tecte les redondances et anomalies potentielles
4. **ATTENTION aux types de donn√©es** : Certaines colonnes peuvent √™tre typ√©es "Text" m√™me si elles contiennent des nombres. Regarde les √©chantillons pour identifier le contenu r√©el et recommande les bons types de donn√©es
5. Utilise les √©chantillons pour comprendre l'usage r√©el des donn√©es
6. Donne des conseils concrets et actionnables

HISTORIQUE DE CONVERSATION:
{conversation_context}

QUESTION: {user_question}

FORMAT DE R√âPONSE:
- Un conseil par ligne, commence par un tiret "-"
- Maximum 1-2 phrases par conseil
- Sois concis, clair et bienveillant

Exemple:
Voici mes recommandations pour am√©liorer votre structure de donn√©es :
- Renomme la colonne "A" pour qu'elle soit plus descriptive
- Change le type de la colonne "age" de Text vers Numeric pour permettre les calculs
- Cr√©e des relations Reference si tu as des entit√©s s√©par√©es"""

        try:
            # ü§ñ Log lisible de la requ√™te IA
            self.logger.log_ai_request(
                model=self.model,
                messages_count=1,
                max_tokens=500,
                request_id=request_id,
                prompt_preview=prompt,
            )

            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=500,
                temperature=0.3,
            )

            recommendations_text = response.choices[0].message.content.strip()

            # ü§ñ Log lisible de la r√©ponse IA
            tokens_used = (
                getattr(response.usage, "total_tokens", None)
                if hasattr(response, "usage")
                else None
            )
            self.logger.log_ai_response(
                model=self.model,
                tokens_used=tokens_used,
                success=True,
                request_id=request_id,
                response_preview=recommendations_text,
            )

            recommendations = self._parse_recommendations(recommendations_text)

            # Si parsing √©choue, retourner le texte brut
            if not recommendations and recommendations_text:
                self.logger.warning(
                    f"Parsing √©chou√©, retour texte brut", request_id=request_id
                )
                recommendations = [recommendations_text]

            self.logger.info(
                f"Recommandations g√©n√©r√©es: {len(recommendations)}",
                request_id=request_id,
            )

            return recommendations

        except Exception as e:
            self.logger.error(f"Erreur LLM: {e}", request_id=request_id)
            return [
                "Impossible de g√©n√©rer des recommandations pour le moment.",
                f"Votre structure contient {metrics.total_tables} table(s) et {metrics.total_columns} colonnes.",
            ]

    def _parse_recommendations(self, text: str) -> List[str]:
        """Retourne exactement ce que le LLM a g√©n√©r√©, SANS AUCUNE MODIFICATION"""
        # Retourner le texte brut ligne par ligne
        lines = text.strip().split("\n")
        recommendations = []

        for line in lines:
            line = line.strip()
            if line:  # Garder seulement les lignes non-vides
                recommendations.append(line)

        return recommendations

    def _create_empty_analysis(
        self, document_id: str, user_question: str
    ) -> ArchitectureAnalysis:
        """Analyse vide en cas d'erreur"""
        return ArchitectureAnalysis(
            document_id=document_id,
            user_question=user_question,
            schemas={},
            metrics=ArchitectureMetrics(
                total_tables=0,
                total_columns=0,
                avg_columns_per_table=0,
                total_relationships=0,
            ),
            recommendations=["Impossible d'analyser la structure du document"],
        )
